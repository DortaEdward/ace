import Head from 'next/head'
import styles from '../styles/Home.module.css';
import { useState, Suspense, useRef } from 'react';
import UrlCard from '../components/UrlCard';
import {
  useQuery,
  useMutation,
  useQueryClient,
} from '@tanstack/react-query'

export default function Home({ urls }) {
  const [formData, setFormData] = useState({
    originalUrl: '',
    shorten: ''
  });

  const queryClient = useQueryClient();

  const { isLoading, data, error } = useQuery(['getUrls'], async () => {
    const res = await fetch('/api/urls')
    const json = res.json();
    return json;
  });

  const createUrl = async (payload) => {
    console.log(payload)
    if(!formData.originalUrl && ! formData.shorten) return
    const res = await fetch('/api/create',{
      method:'POST',
      body:JSON.stringify(formData),
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  const handleChange = (e) => {
    const {name, value} = e.target;
    setFormData(formData => ({
      ...formData,
      [name]:value
    }))
  }

  // create urls
  const mutation = useMutation({
    mutationFn: createUrl,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['getUrls'] })
    }
  });

  if (isLoading) return <div>Loading...</div>


  return (
    <div className={styles.container}>
      <Head>
        <title>Ace Shortner</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1 className={styles.logo}>Ace Shortner</h1>
        <p className={styles.subcaption}>Yet Another Link Shortener</p>
      </header>
      <div className={styles.urlContainer}>
        <form className={styles.urlForm}>
          <fieldset>
            <input onChange={handleChange} value={formData.originalUrl} name='originalUrl' type="url" className={styles.originalUrl} placeholder="Enter Url ..." />
            <input onChange={handleChange} value={formData.shorten} name='shorten' type="text" className={styles.shorten} placeholder="New Url Name" />
          </fieldset>
          <button
            className={styles.submitBtn}
            onClick={(e)=>{
              e.preventDefault()
              mutation.mutate({
                id: Date.now(),
                title: 'Do Laundry',
              })
            }}
            >Submit</button>
        </form>
        <Suspense>

          <div className={styles.urlCardContainer}>
            {
              data.urls.map((url) => {
                return (
                  <UrlCard key={url.shorten} url={url} />
                )
              })
            }
          </div>
        </Suspense>
      </div>
    </div>
  )
}